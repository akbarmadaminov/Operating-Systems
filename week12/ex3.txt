As we see with SYNC flag compiler don't optimize input/output delay,
that make our program much slower.

By changing buffer size we can see that it is important to choose
the right buffer size for a program.

Smaller buffer sizes take longer time with big input.
But bigger sizes need more memory what can cause other problems.


Comparing on file with size: 121,7KB (121â€¯662 bytes):
	gcc copy.c -o copy
	time ./copy fileA.txt fileB.txt

real	0m0,002s
user	0m0,000s
sys	0m0,001s

	gcc copy.c -o copy -DBUF_SIZE=1
	time ./copy fileA.txt fileB.txt

real	0m0,319s
user	0m0,096s
sys	0m0,222s


	gcc copy.c -o copy -DBUF_SIZE=10
	time ./copy fileA.txt fileB.txt

real	0m0,063s
user	0m0,016s
sys	0m0,047s

	gcc copy.c -o copy -DBUF_SIZE=100
	time ./copy fileA.txt fileB.txt

real	0m0,009s
user	0m0,005s
sys	0m0,004s


	gcc copy.c -o copy -DBUF_SIZE=100000
	time ./copy fileA.txt fileB.txt

real	0m0,003s
user	0m0,001s
sys	0m0,003s


	gcc copy.c -o copy -DBUF_SIZE=1000000
	time ./copy fileA.txt fileB.txt

real	0m0,004s
user	0m0,001s
sys	0m0,003s




	gcc copy.c -o copy -DSYNC
	time ./copy fileA.txt fileB.txt

real	0m0,298s
user	0m0,003s

sys	0m0,026s


	gcc copy.c -o copy -DSYNC -DBUF_SIZE=1
	time ./copy fileA.txt fileB.txt

real	4m53,229s
user	0m0,798s
sys	0m19,993s


	gcc copy.c -o copy -DSYNC -DBUF_SIZE=10
	time ./copy fileA.txt fileB.txt

real	0m28,916s
user	0m0,102s
sys	0m1,964s


	gcc copy.c -o copy -DSYNC -DBUF_SIZE=100
	time ./copy fileA.txt fileB.txt

real	0m2,947s
user	0m0,010s
sys	0m0,231s


	gcc copy.c -o copy -DSYNC -DBUF_SIZE=100000
	time ./copy fileA.txt fileB.txt

real	0m0,008s
user	0m0,000s
sys	0m0,002s


	gcc copy.c -o copy -DSYNC -DBUF_SIZE=1000000
	time ./copy fileA.txt fileB.txt

real	0m0,007s
user	0m0,004s
sys	0m0,000s
